CREATE DATABASE alura;

CREATE TABLE aluno (
    id SERIAL PRIMARY KEY,
	primeiro_nome VARCHAR(255) NOT NULL,
	ultimo_nome VARCHAR(255) NOT NULL,
	data_nascimento DATE NOT NULL
);


CREATE TABLE categoria (
    id SERIAL PRIMARY KEY,
	nome VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE curso (
    id SERIAL PRIMARY KEY,
	nome VARCHAR(255) NOT NULL,
	categoria_id INTEGER NOT NULL REFERENCES categoria(id)
);


--Outra sintáxe para a criação de foreign key, está abaixo, onde referenciamos a tabela, na linha de criação
CREATE TABLE aluno_curso (
	aluno_id INTEGER NOT NULL REFERENCES aluno(id),
	curso_id INTEGER NOT NULL REFERENCES curso(id),
	PRIMARY KEY (aluno_id, curso_id)
);


--CHAVES ESTRANGEIRAS

CREATE TABLE CATEGORIA(
	ID SERIAL PRIMARY KEY,
	NOME VARCHAR(255) NOT NULL
);


DROP TABLE ALUNO_CURSO;
DROP TABLE CURSOS;

INSERT INTO CATEGORIA (ID, NOME) VALUES (1, 'PROGRAMAÇÃO');
INSERT INTO CATEGORIA (ID, NOME) VALUES (2, 'BANCO DE DADOS');
INSERT INTO CATEGORIA (ID, NOME) VALUES (3, 'FRONT END');
INSERT INTO CATEGORIA (ID, NOME) VALUES (4, 'BACK END');
INSERT INTO CATEGORIA (ID, NOME) VALUES (5, 'CIÊNCIA DE DADOS');


INSERT INTO CURSO (ID, NOME, CATEGORIA_ID) VALUES (1, 'HTML', 3);
INSERT INTO CURSO (ID, NOME, CATEGORIA_ID) VALUES (2, 'CSS', 3);
INSERT INTO CURSO (ID, NOME, CATEGORIA_ID) VALUES (3, 'PHP', 1);
INSERT INTO CURSO (ID, NOME, CATEGORIA_ID) VALUES (4, 'POSTGRE', 2);
INSERT INTO CURSO (ID, NOME, CATEGORIA_ID) VALUES (5, 'JAVASCRIPT', 4);
INSERT INTO CURSO (ID, NOME, CATEGORIA_ID) VALUES (6, 'POWER BI', 5);

INSERT INTO ALUNO (id, primeiro_nome, ultimo_nome, data_nascimento) VALUES (1, 'LUCAS', 'SILVA', '1998-02-27');
INSERT INTO ALUNO (id, primeiro_nome, ultimo_nome, data_nascimento) VALUES (2, 'PEDRI', 'PAULO', '1988-12-12');
INSERT INTO ALUNO (id, primeiro_nome, ultimo_nome, data_nascimento) VALUES (3, 'PAULI', 'PEDRI', '1995-04-17');
INSERT INTO ALUNO (id, primeiro_nome, ultimo_nome, data_nascimento) VALUES (4, 'CASÃO', 'ROMERO', '1995-05-05');
INSERT INTO ALUNO (id, primeiro_nome, ultimo_nome, data_nascimento) VALUES (15, 'MULA', 'BRITO', '2000-09-28');

INSERT INTO ALUNO_CURSO (ALUNO_ID, CURSO_ID) VALUES (1, 4);
INSERT INTO ALUNO_CURSO (ALUNO_ID, CURSO_ID) VALUES (1, 6);
INSERT INTO ALUNO_CURSO (ALUNO_ID, CURSO_ID) VALUES (2, 2);
INSERT INTO ALUNO_CURSO (ALUNO_ID, CURSO_ID) VALUES (2, 5);
INSERT INTO ALUNO_CURSO (ALUNO_ID, CURSO_ID) VALUES (3, 2);
INSERT INTO ALUNO_CURSO (ALUNO_ID, CURSO_ID) VALUES (3, 4);
INSERT INTO ALUNO_CURSO (ALUNO_ID, CURSO_ID) VALUES (3, 5);
INSERT INTO ALUNO_CURSO (ALUNO_ID, CURSO_ID) VALUES (4, 2);
INSERT INTO ALUNO_CURSO (ALUNO_ID, CURSO_ID) VALUES (4, 6);
INSERT INTO ALUNO_CURSO (ALUNO_ID, CURSO_ID) VALUES (15, 1);
INSERT INTO ALUNO_CURSO (ALUNO_ID, CURSO_ID) VALUES (15, 2);
INSERT INTO ALUNO_CURSO (ALUNO_ID, CURSO_ID) VALUES (15, 3);


--Alunos em mais cursos

SELECT 	ALUNO.PRIMEIRO_NOME,
		ALUNO.ULTIMO_NOME,
		COUNT(CURSO.ID) NUMERO_CURSOS  
FROM ALUNO
JOIN ALUNO_CURSO ON ALUNO_CURSO.ALUNO_ID = ALUNO.ID
JOIN CURSO ON CURSO.ID = ALUNO_CURSO.CURSO_ID
GROUP BY 1, 2
ORDER BY 3 DESC;

-- Outra forma de fazer
SELECT 	ALUNO.PRIMEIRO_NOME,
		ALUNO.ULTIMO_NOME,
		COUNT(ALUNO_CURSO.CURSO_ID) NUMERO_CURSOS  
FROM ALUNO
JOIN ALUNO_CURSO ON ALUNO_CURSO.ALUNO_ID = ALUNO.ID
GROUP BY 1, 2
ORDER BY NUMERO_CURSOS DESC
LIMIT 1;


--Cursos mais requisitados(MY WAY)
SELECT 	CURSO.NOME,
		COUNT(ALUNO_CURSO.ALUNO_ID)
FROM CURSO 
JOIN ALUNO_CURSO ON ALUNO_CURSO.ALUNO_ID = CURSO.ID
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;


-- OUTRO JEITO

SELECT CURSO.NOME,
		COUNT(ALUNO_CURSO.ALUNO_ID) QUANTIDADE
FROM CURSO
JOIN ALUNO_CURSO ON ALUNO_CURSO.CURSO_ID = CURSO.ID
GROUP BY 1
ORDER BY QUANTIDADE DESC

--IN

SELECT * FROM CURSO;
SELECT * FROM CATEGORIA;

SELECT * FROM 
CURSO 
WHERE CATEGORIA_ID IN (1,2);


--Queries aninhadas

SELECT ID FROM CATEGORIA WHERE NOME NOT LIKE '% %';

SELECT * FROM CATEGORIA;


SELECT CURSO.NOME FROM 
CURSO 
WHERE CATEGORIA_ID IN (
	SELECT ID FROM CATEGORIA WHERE NOME NOT LIKE '% %'
);

-- Personalizando tabela


  SELECT curso.nome,
         COUNT(aluno_curso.aluno_id) numero_alunos
    FROM curso
    JOIN aluno_curso ON aluno_curso.curso_id = curso.id
GROUP BY 1
ORDER BY numero_alunos DESC
    HAVING COUNT(aluno_curso.aluno_id) > 2;
SELECT 	CATEGORIA.NOME AS CATEGORIA,
		COUNT(CURSO.ID) AS NUMERO_CURSOS
FROM CATEGORIA
JOIN CURSO ON CURSO.CATEGORIA_ID = CATEGORIA.ID
GROUP BY CATEGORIA;

SELECT CATEGORIA 
FROM (
		SELECT 	CATEGORIA.NOME AS CATEGORIA,
		COUNT(CURSO.ID) AS NUMERO_CURSOS
		FROM CATEGORIA
		JOIN CURSO ON CURSO.CATEGORIA_ID = CATEGORIA.ID
		GROUP BY CATEGORIA
	) AS CATEGORIA_CURSO
WHERE NUMERO_CURSOS >1;


-- 01 Funções de strings


SELECT * FROM ALUNO;

SELECT (primeiro_nome || ' ' || ultimo_nome) as Nome_Completo from aluno;


SELECT CONCAT('LUCAS', '', NULL);


SELECT CONCAT('LUCAS', '', NULL, 'SILVA');

SELECT UPPER(CONCAT('LUCAS', '', NULL, 'SILVA'));

SELECT TRIM(UPPER(CONCAT('LUCAS', '', NULL, 'SILVA')));

-- Funções de data

--forma complexa, com cálculo
SELECT 	(primeiro_nome || ' ' || ultimo_nome) as Nome_Completo, 
		(NOW()::DATE -  DATA_NASCIMENTO) / 365 as idade from aluno;
		
-- usando o age
SELECT 	(primeiro_nome || ' ' || ultimo_nome) as Nome_Completo, 
		  age(data_nascimento) as idade 
		   from aluno;
		   
--extraindo só o ano
SELECT 	(primeiro_nome || ' ' || ultimo_nome) as Nome_Completo, 
		  extract(year from age(data_nascimento)) as idade 
		   from aluno;
		   
-- Funções matemáticas

select pi();

select @ 53545;

--Conversão de dados

select now()::date;

select to_char(now(), 'DD/MM/YYYY');


select to_char(now(), 'DD/MONTH/YYYY');


SELECT TO_CHAR(128.3::REAL, '999D9');


-- View

CREATE VIEW VW_CURSOS_POR_CATEGORIA AS
SELECT 	CATEGORIA.NOME AS CATEGORIA,
		COUNT(CURSO.ID) AS NUMERO_CURSOS
		FROM CATEGORIA
		JOIN CURSO ON CURSO.CATEGORIA_ID = CATEGORIA.ID
		GROUP BY CATEGORIA;


SELECT * FROM VW_CURSOS_POR_CATEGORIA;



--APLICANDO FILTROS NA VIEW

SELECT CATEGORIA 
FROM VW_CURSOS_POR_CATEGORIA AS CATEGORIA_CURSOS
WHERE NUMERO_CURSOS >=1; 


CREATE VIEW VW_CURSOS_PHP AS 
SELECT NOME FROM CURSO
WHERE ID = 3;


SELECT * FROM VW_CURSOS_PHP;


-- Trabalhando na View

SELECT 	CATEGORIA.ID AS CATEGORIA_ID,
		VW_CURSOS_POR_CATEGORIA.*	
FROM VW_CURSOS_POR_CATEGORIA 
JOIN CATEGORIA ON CATEGORIA.NOME = VW_CURSOS_POR_CATEGORIA.CATEGORIA; 





